버퍼 ( buffer )
	-> 보낼때 일정크기 만큼 쌓아서 보내준다.	( 바이트든, 문자든 )
	-> 속도를 더 내기 위해서 사용. ( 엄청 빨라짐 )  3초 걸리는걸 0.001초 로 줄여버림

	바이트 버퍼 스트림
		-> BufferedInputStream , BufferedOutputStream
	
	문자 버퍼 스트림
		-> BufferedReader , BufferedWriter
		
	BufferedOutputSream bout = new BufferedOutputStream(System.out, 20 );
				==> 20의 의미는 20바이트 크기의 버퍼를 설정 해준다는뜻
				
============================================================================

File 클래스
	-> java.io.File
	-> 파일과 디렉토리 생성 및 관리
	
	File f = new File(" 파일의 경로명 ");
	
	File 메소드
		-> asd.getName() == 파일의 이름
		-> asd.getPath() == 파일의 경로
		-> asd.getParent() == 파일의 부모 디렉토리
		-> isFile()	==	파일이 존재하냐
		-> isDirectory()	==	디렉토리가 존재하냐
		
============================================================================
		
자바의 GUI
	-> 안드로이드 어플 만들때 종종 사용되기도 한다.
	-> CLI 와 완전 다른개념. 그래픽으로 interface를 다룬다.
	-> java.awt / javax.swing 을 주로 쓴다.
	
AWT
	-> 운영체제에 따라 GUI 가 다르게 표현되는게 있어서 잘 안씀. ( 운영체제에 의존적이다. )
	
Swing
	-> AWT 가 같고 있는 클래스들을 다 포함하고있다 
	-> AWT 가 갖고있는 클래스에 J 만 붙히면 된다.
	-> 죄다 앞에 J 가 붙는다고 보면됨.
	-> 운영체제에 의존하지 않음. 
	-> JComponent를 상속받는 클래스	

	ex)
	JCheckBox 는 중복선택 가능 	//	취미
	JRadioButton 은 중복선택 불가	// 성별
	JPasswordField 는 값이 다 *로 표시된다.
			등등....
			
	우리가 해야할건 이벤트를 처리하게 만드는것.
	
컨테이너 ( Container )
	-> java.awt.Container 상속
	-> 다른 컨테이너에 포함 될 수 있음.
	
	JFrame = 가장 기본이 되는 프레임 ( 최상위 컨테이너 )
	
	JFrame 안에 JCheckBox , JRadioButton 등등.. 들이 들어가있다
	컨테이너 안에 컨테이너가 들어갈수있다.
	
				컨테이너  -> 컨테이너 -> 클래스
				JFrame -> JPanel -> JCheckBox
				
				
	컨텐츠 팬 안에 여러 컨텐츠들을 선언해주면된다.
	
	Container contentPane = frame.getContentPane(); <- 컨텐츠 팬 알아내기
	
	
	Component 란 하나하나의 요소들. 즉 계산기를 예를들면 1,2,3,4,5... 이런친구들을 말한다.
	
	
쓰레드 ( Thread )	
	main 메소드 = 메인 스레드..
	또다른 스레드 도 실행이 되고있다.
	
	그래서 백그라운드에서도 남아있던것이였다.
	
배치관리자 ( Layout manager )
	JFrame / JPanel 등등
	
	FlowLayout();
	
	BorderLayout();	 // 컨테이너 공간에 5개를 나눠준다.
	
	GridLayout();		// 계산기 배치 라고 생각하면됨.
				// (4,3,5,5) -> 4x3 으로 그리드 레이아웃 설정, 좌우 간격 5, 상하 간격 5
				
	컨테이너의 배치관리자 제거 방법
		-> c.setLayout(null)
		
	컴포넌트 절대 크기와 절대 위치 설정방법				c = component
	c.setSize(int width, int height);
	c.setLocation(int x, int y);
	
	c.setBounds(int x, int y ,int width, int height);	// 이렇게 한번에 가능함
	
============================================================================

이벤트 ( Event )
	-> 마우스 클릭, 우클릭, 키보드 누름 등등
	
	이벤트 발생! (마우스를 누름)  ->  이벤트 객체 생성  ->  이벤트 리스너 찾기  ->  이벤트 리스너 호출  ->  이벤트 리스너 실행
	
	ActionListener 인터페이스
		actionPerformed(ActionEvent a);
		
	MouseListener 인터페이스
		다섯개나 있음.
		
어댑터 클래스
	-> 다섯개나 되는 추상메소드에서 하나만 골라쓸때 4개도 다 오버라이딩 해줘야해서
		MouseAdapter를 써서 안에 다 모아놓는다.	
============================================================================
	
		그냥 참고용 . File -> Switch workspace 에서 워크스페이스를 바꿀수있당.
		
============================================================================
		
내부 클래스
	-> private 으로 클래스를 정의하면. 그 클래스를 포함한 클래스만 쓸수있다.
	-> 일회성 클래스들 쓸때 주로 쓰임.

익명 클래스
	-> 클래스 + 인스턴스 를 한번에 쓸수있음.
	
============================================================================

데이터베이스 ( Database )

	Table 형태의 데이터 테이블
	
	<학생관리 테이블>

	STUNO		NAME		AGE	 		DEPT		PHONE
	100123		홍길동		20			컴퓨터학과		1
	100124		철수			21			소웨과		230
	100125		영희			22			미디어과		489
	100126		강호동		24			국문과		80
	100127		유재석		25			영어과		3410

	
	Column = 열, 		//  	AGE Column , NAME Column , 
	Record = 행, 		//		철수~~~ , 영희 ~~~